version
install.packages("tidyverse")
library("tidyverse")
library(tidyverse)
install.packages(c("gapminder", "nycflights13", "Lahman"))
library(tidyverse)
help(scale)
setwd("~/Documents/DataScience_IA_BigData_BI/MachineLearning/3.RegresiónLinealMúltiple")
#1. Importar datos
dataset = read.csv('50_Startups.csv')
View(dataset)
help(ave)
dataset$Purchased = factor(dataset$State,levels= c("New York",
"California",
"Florida"),
labels = c(1,2,3))
View(dataset)
View(dataset)
#1. Importar datos
dataset = read.csv('50_Startups.csv')
#dataset = dataset[,2:3]
#3. Codificar las variables categoricas
dataset$Purchased = factor(dataset$State,levels= c("New York",
"California",
"Florida"),
labels = c(1,2,3))
#Rwgresión lineal múltiple
#1. Importar datos
dataset = read.csv('50_Startups.csv')
#dataset = dataset[,2:3]
#3. Codificar las variables categoricas
dataset$State = factor(dataset$State,levels= c("New York",
"California",
"Florida"),
labels = c(1,2,3))
#4. Split de datos en entrenamiento y test
set.seed(123)#si deseamos hacer de forma aleotoria usamos una semilla
split = sample.split(dataset$Profit, SplitRatio = 0.8)
library(caTools)
install("caTools")
install(caTools)
install caTools
help(install)
??install
install.packages("caTools")
library(caTools)
set.seed(123)#si deseamos hacer de forma aleotoria usamos una semilla
split = sample.split(dataset$Profit, SplitRatio = 0.8)
training_set = subset(dataset, split==TRUE)
testing_set = subset(dataset, split==FALSE)
View(testing_set)
View(testing_set)
View(training_set)
View(training_set)
View(dataset)
View(dataset)
# 4. Creación de modelo usando Modelo Lineal simple
# Usando el . indicamos todas las variables excepto las anteriores
regression = lm(formula = Profit ~ .,
data = training_set)
View(regression)
View(regression)
summary(regression)
summary(regression)
history
# Predicción de datos
y_pred = predict(regression, newdata = testing_set)
y_pred
View(testing_set)
View(testing_set)
backwardElimination <- function(x, sl) {
numVars = length(x)
for (i in c(1:numVars)){
regressor = lm(formula = Profit ~ ., data = x)
maxVar = max(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"])
if (maxVar > sl){
j = which(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"] == maxVar)
x = x[, -j]
}
numVars = numVars - 1
}
return(summary(regressor))
}
SL = 0.05
dataset = dataset[, c(1,2,3,4,5)]
backwardElimination(training_set, SL)
