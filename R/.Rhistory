install.packages("ggplot2")
library(ggplot2)
dataset = read.csv('Salary_Data.csv')
---
title: "Prueba"
output: pdf_document
---
tinytex::install_tinytex()
install_tinytex()
tinytex::install_tinytex()
2*2
4%2
4/2
2*3-10
20-10*(10+25)
?round
round(20/3)
round(20/3, 2)
floor(20/3)
Respuesta = 20/7
print(Respuesta)
Respuesta
x=20; y=50
?prod
prod(x,y,5)
floor(prod(x,y,50))
10**2
10^{2}
10^{3}/25**36+4875-59
sqrt(2)
sqrt(-2)
sqrt(2)
sqrt(-64)
sqrt(64)
sqrt(-64)
3+25i
2.68+9.87i
sqrt(2)
sqrt(2)
3+sqrt(2)i
3+(58*47)i
complex(real=5, imaginary = (sqrt(9)+5))
2+8*i
i
2-i
1i
2-1i
z=as.complex(-4)
sqrt(z)
(2+3i)/(5+1i)
sqrt(2+3i)
z=2+1
z=8+7i
Conj(z)
Mod(z)
Arg(z)
R.version
install.packages("tidyverse")
library(tidyverse)
tidyverse_update()
install.packages(c("gapminder","nycflights13","Lahman"))
sqrt(25)
sin(pi)
cos(pi)
sum(c(1,2,3,4,5))
mean(c(1,2,3,4,5))
x = c(1,2,3,4,5)
x
x <- c(4,5,6)
x
c(10,20,26,27) -> x
x
library(nycflights13)
nycflights13::flights
dput(dtcars)
dput(nycflight13)
install.packages(mtcars)
install.packages("mtcars")
dput(nycflights13)
y <- data.frame(a=1, b="a")
dput(y)
setwd("C:/Users/ander/Desktop/R")
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
#asignamos toda la librería de os a una variable de R
os <- import("os")
Y
# accede a una función de la librería con $
os$listdir(".")
library(reticulate)
use_python("C:/Users/ander/AppData/Local/Programs/Python/Python38")
#asignamos toda la librería de os a una variable de R
os <- import("os")
# accede a una función de la librería con $
os$listdir(".")
np <- import("numpy", convert = FALSE)
x <- np$array(c(1:4))
sum <- x$cumsum()
print(sum)
np <- import("numpy", convert = FALSE)
x <- np$array(c(1:4))
sum <- x$cumsum()
print(sum)
# ahora si quiero convertir de un array de python y convertir a R
py_to_r(sum)
print(sum)
#documentación de librería de R
help(py_to_r)
# documentación de librería Python
py_help(numpy)
#documentación de librería de R
help(py_to_r)
# documentación de librería Python
py_help(sklearn$preprocesing)
#documentación de librería de R
help(py_to_r)
# documentación de librería Python
py_help(numpy$array)
a <- np_array(c(1:10), order="C")
a
reticulate::repl_python()
import pandas as pd
a = pd.Dataframe({'A':[1,2,3]})
a
quit
reticulate::repl_python()
import pandas as pd
a = pd.Dataframe({'A':[1,2,3]})
quit
reticulate::repl_python()
import pandas as pd
a = pd.Dataframe({'A':[1,2,3]})
a
quit
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
use_python("C:/Users/ander/AppData/Local/Programs/Python/Python38")
#asignamos toda la librería de os a una variable de R
os <- import("os")
# accede a una función de la librería con $
os$listdir(".")
source_python("nombreArchivo.py")
#source_python("nombreArchivo.py")
# con esa importación podré usar python de forma normal
np <- import("numpy", convert = FALSE)
x <- np$array(c(1:4))
sum <- x$cumsum()
print(sum)
# ahora si quiero convertir de un array de python y convertir a R
py_to_r(sum)
print(sum)
#documentación de librería de R
help(py_to_r)
# documentación de librería Python
#py_help(numpy$array)
a <- np_array(c(1:10), order="C")
a
reticulate::repl_python()
import pandas as pd
a = pd.Dataframe({'A':[1,2,3]})
a
quit
reticulate::repl_python()
import pandas as pd
a = pd.DataFrame({'A':[1,2,3]})
a
import pandas as pd
quit
reticulate::repl_python()
use_python("C:/Users/ander/AppData/Local/Programs/Python/Python38")
import pandas as pd
a = pd.DataFrame({'A':[1,2,3]})
a
quit
reticulate::repl_python()
import pandas as pd
a = pd.DataFrame({'A':[1,2,3]})
a
quit
library(reticulate)
use_python("C:/Users/ander/AppData/Local/Programs/Python/Python38")
#asignamos toda la librería de os a una variable de R
os <- import("os")
# accede a una función de la librería con $
os$listdir(".")
reticulate::repl_python()
import pandas as pd
a = pd.DataFrame({'A':[1,2,3]})
a
Sys.setenv(RETICULATE_PYTHON = "C:/Users/ander/AppData/Local/Programs/Python/Python38")
py_config()
quit()
exit()
wq
quit
Sys.setenv(RETICULATE_PYTHON = "C:/Users/ander/AppData/Local/Programs/Python/Python38")
py_config()
sys.setenv(RETICULATE_PYTHON = "C:/Users/ander/AppData/Local/Programs/Python/Python38")
Sys.setenv(RETICULATE_PYTHON = "C:/Users/ander/AppData/Local/Programs/Python/Python38")
Sys.setenv(RETICULATE_PYTHON = "C:/Users/ander/AppData/Local/Programs/Python/Python38")
Sys.setenv(RETICULATE_PYTHON = "C:/Users/ander/AppData/Local/Programs/Python/Python38")
py_config()
py_config()
py_config()
py_config()
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
use_python("C:/Users/ander/AppData/Local/Programs/Python/Python38")
#asignamos toda la librería de os a una variable de R
os <- import("os")
# accede a una función de la librería con $
os$listdir(".")
np <- import("numpy", convert = FALSE)
x <- np$array(c(1:4))
sum <- x$cumsum()
print(sum)
# ahora si quiero convertir de un array de python y convertir a R
py_to_r(sum)
print(sum)
reticulate::repl_python()
import pandas as pd
a = pd.DataFrame({'A':[1,2,3]})
a
quit
a <- np_array(c(1:10), order="C")
a
?round
Respuesta = 0.7
print(Respuesta)
sum(c(1,2,3,4,5))
x <- c(5,89,75)
print(x)
install.packages("tidyverse")
install.packages('tidyverse')
library(tidyverse)
tidyverse_update()
z = data.frame(a=1, c=65)
dput(z)
library(tidyverse)
# Carga de dataset de carros ggplot2
mpg
# Para observarlo en tamaño completo
View(mpg)
help(mpg)
ggplot(data = mpg)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
ata Visualization 11/04/2022
library(tidyverse)
# Comprobar si los coches con motor más grande consumen más que los de menor tamaño
# La relación consumo / tamaño es lineal? No lineal? Exponencial?
mpg # Carga de dataset de carros ggplot2
View(mpg) # Ver toda la data en formato tabla
help(mpg) #ver documentación del dataset, puedo usar ?mpg
"
manufacturer: Nombre fabricante
model: Nombre modelo
displ: Capacidad motor en litos
year: año de fabricación
cyl: cilindraje
trans: Tipo transmisión
drv: Tipo de dirección
cty: Millas por galón en ciudad
hwy: Millas por galón en carretera
fl: Tipo Combustible
class: Tipo carro
"
# Primer gráfico, indicamos el dataset y hacemos un scatter
# ggplot llama al sistema de coordenadas, especificamos la data, luego se añaden capas
# aes: representa aesthetic
# 1. Plantilla geom ggplot
#ggplot(data = <DataFrame>)+
#<GeomFunction>(maping = aes(<Maping>))
data = mpg
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
# Tarea 1
?mpg
# hwy vs cyl
ggplot(data=mpg) +
geom_point(mapping = aes(x = hwy, y = cyl))
# Se observa que a mayor cilindraje menor millas por galón en autopista y viceversa
# cty vs cyl
ggplot(data=mpg) +
geom_point(mapping = aes(x = cty, y = cyl))
# Se observa que a mayor cilindraje menor millas por galón en ciudad y viceversa
# class vs drv
ggplot(data = mpg) +
geom_point(mapping = aes(x = class, y = drv))
# Se observa una distribución de los tipos de autos con su dirección
# Gráfico con tres variables, el tipo de color viene dado por la clase de auto
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class))
# Manejando tamaño de los puntos
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, size = class))
# Basados en la transparencia
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, alpha = class))
# Basados en forma (máximo acepta 6 formas)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, shape = class))
# Elección manual de estéticos
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), color = 'red')
# color = nombre color en string
# size = tamaño en mm
# shape = formas con números del 0 al 25
#   Gráfica con todas las formas disponibles
d=data.frame(p=c(0:25,32:127))
ggplot() +
scale_y_continuous(name="") +
scale_x_continuous(name="") +
scale_shape_identity() +
geom_point(data=d, mapping=aes(x=p%%16, y=p%/%16, shape=p), size=5, fill="red") +
geom_text(data=d, mapping=aes(x=p%%16, y=p%/%16+0.25, label=p), size=3)
# Elección manual de estéticos completa
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy),
shape = 23, size = 4, color = 'red', fill = 'blue')
# Tarea 2
# Dibuja las variables contínuas con color, tamaño y forma respectivamente.
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = year),
shape = 2, size = 2, color = 'blue', fill = 'green')
# Tarea 2
# Dibuja las variables contínuas con color, tamaño y forma respectivamente.
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = cyl),
shape = 2, size = 2, color = 'blue', fill = 'green')
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = cyl, color = cyl),
shape = 2, size = 2, color = 'blue', fill = 'green')
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ,color = cyl, y = cyl),
shape = 2, size = 2, color = 'blue', fill = 'green')
?stroke
# Explorar stroke
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = cyl, stroke = year ),
shape = 2, size = 2, color = 'blue', fill = 'green')
# Explorar stroke
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = cyl, stroke = cty ),
shape = 2, size = 2, color = 'blue', fill = 'green')
# Explorar stroke: permite modificar el
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = cyl, stroke = 1 ),
shape = 2, size = 2, color = 'blue', fill = 'green')
p +
geom_point(aes(colour = factor(cyl)), size = 4) +
geom_point(colour = "grey90", size = 1.5)
# Múltiples puntos con diferentes figuras
p <- ggplot(mtcars, aes(mpg, wt, shape = factor(cyl)))
p +
geom_point(aes(colour = factor(cyl)), size = 4) +
geom_point(colour = "grey90", size = 1.5)
geom_point(aes(colour = aes(color = displ < 4, size = 4) +
geom_point(aes(colour = aes(color = displ < 4, size = 4) +
factor(cyl))
p <- ggplot(mtcars, aes(mpg, wt, shape = factor(cyl)))
p +
geom_point(aes(colour = factor(cyl)), size = 4) +
geom_point(colour = "grey90", size = 1.5)
ggplot(mtcars, aes(mpg, wt, shape = factor(cyl))) +
geom_point(aes(colour = factor(cyl)), size = 4) +
geom_point(colour = "grey90", size = 1.5)
ggplot(mtcars, aes(mpg, wt, shape = factor(cyl))) +
geom_point(aes(colour = factor(cyl)), size = 4) +
geom_point(colour = "grey90", size = 1.5)
# Múltiples puntos con diferentes figuras
ggplot(mtcars, aes(mpg, wt, shape = factor(cyl))) +
geom_point(aes(colour = displ < 4), size = 4) +
geom_point(colour = "grey90", size = 1.5)
# Múltiples puntos con diferentes figuras
ggplot(data = mpg, mtcars, aes(mpg, wt, shape = factor(cyl))) +
geom_point(aes(colour = displ < 4), size = 4) +
geom_point(colour = "grey90", size = 1.5)
# Múltiples puntos con diferentes figuras
ggplot(mtcars, aes(mpg, wt, shape = factor(cyl))) +
geom_point(aes(colour = displ < 4), size = 4) +
geom_point(colour = "grey90", size = 1.5)
# Múltiples puntos con diferentes figuras
ggplot(mtcars, aes(mpg, wt, shape = factor(cyl))) +
geom_point(aes(colour = factor(cyl)), size = 4) +
geom_point(colour = "grey90", size = 1.5)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = cyl, stroke = 1 ),
shape = 2, size = 2, color = displ <4 , fill = 'green')
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = cyl, color = displ <4, stroke = 1 ),
shape = 2, size = 2 , fill = 'green')
