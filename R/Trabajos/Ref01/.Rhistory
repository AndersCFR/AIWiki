## b) para la variable NA_Sales
t.test(x=dataset$NA_Sales, conf.level = 0.95)$conf.int #0.06463596 0.18314182
# 5. Realice un contraste de hipÃ³tesis para comparar proporciones de dos variables
# categÃ³ricas (defina previamente los Ã©xitos y fracasos en cada caso)
# a) Genre: Se afirma que menos del 80% de los gÃ©neros es sport
#H0: proporciÃ³n < 0.8
#Ha: proporciÃ³n >= 0.8
prop.test( length(subset(dataset, dataset$Genre == 'Sports')),
length(dataset$Genre),
0.8,
alternative = "less") #p-value < 2.2e-16 < 0.05
#Por el valor de p(menor a 0.05), se rechaza la H0
# b) Publisher: Se afirma que  Electronic Arts es el 70% de los publishers
#H0: proporciÃ³n = 0.7
#Ha: proporciÃ³n < 0.7
prop.test( length(subset(dataset, dataset$Publisher == "Electronic Arts")),
length(dataset$Publisher),
0.7,
alternative = "less") # p-value = 2.86e-15 < 0.05
#Por el valor de p (menor a 0.05), se rechaza la H0
# 6. Realice una regresiÃ³n lineal simple entre dos variables numÃ©ricas
pairs(dataset)
cor(dataset$EU_Sales, dataset$NA_Sales) #0.4646233
#Modelo de regresiÇ¿n lineal simple
linearModel = lm(formula = EU_Sales ~  NA_Sales,
data = dataset)
summary(linearModel)
install.packages("modeest")
## 1.Encontramos el datset vgsales de Kaggle
#El dataset contempla ventas de videojuegos de varias plataformas
#Se ha filtrado para tomar en cuenta solo las de la plataforma XOne del 2016
dataset = read.csv("vgsales.csv")
summary(dataset)
class(dataset$Platform)
#dataset$Platform <- as.character(dataset$Platform)
dataset <- dataset[(dataset[, "Platform"]=="XOne") & (dataset[, "Year"]==2016) , ]
summary(dataset)
nrow(dataset) #54 registros
## 2. Realizar el anÃ¡lisis descriptivo (medidas y grÃ¡ficos) para dos variables numÃ©ricas
# a) AnÃ¡lisis descriptivo para la variable EU_Sales
mean(dataset$EU_Sales, na.rm = TRUE)
median(dataset$EU_Sales, na.rm = TRUE)
install.packages("modeest")
library(modeest)
mfv(dataset$EU_Sales) #la moda es 0.01
summary(dataset$EU_Sales)
#Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
#0.00000 0.01000 0.02000 0.08574 0.07750 1.26000
##GrÃ¡ficos
hist(dataset$EU_Sales)
plot(dataset$EU_Sales)
# b) AnÃ¡lisis descriptivo de la variable NA_sales
dataset$NA_Sales <- as.numeric(dataset$NA_Sales)
dataset
mean(dataset$NA_Sales, na.rm = TRUE)
median(dataset$NA_Sales, na.rm = TRUE)
mfv(dataset$NA_Sales) #la moda es 0.01
summary(dataset$NA_Sales)
#Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
#0.0000  0.0100  0.0300  0.1239  0.1450  1.2000
##GrÃ¡ficos
hist(dataset$NA_Sales)
plot(dataset$NA_Sales)
# 3. Realizar el anÃ¡lisis descriptivo (medidas y grÃ¡ficos) para dos variables categÃ³ricas
# a) AnÃ¡lisis descriptivo de la variable categÃ³rica Genre
##Tabla de frecuencia absoluta
table(dataset$Genre)
##Tabla de frecuencia relativa
table(dataset$Genre)/margin.table(table(dataset$Genre))
summary(dataset$Genre)
plot(dataset$Genre)
# b) AnÃ¡lisis descriptivo de la variable categÃ³rica Publisher
##Tabla de frecuencia absoluta
table(dataset$Publisher)
##Tabla de frecuencia relativa
table(dataset$Publisher)/margin.table(table(dataset$Publisher))
summary(dataset$Publisher)
plot(dataset$Publisher)
# 4. Realice el intervalo de confianza para las dos variables numÃ©ricas
## a) para la variable EU_Sales
t.test(x=dataset$EU_Sales, conf.level = 0.95)$conf.int #0.03289506 0.13858642
## b) para la variable NA_Sales
t.test(x=dataset$NA_Sales, conf.level = 0.95)$conf.int #0.06463596 0.18314182
# 5. Realice un contraste de hipÃ³tesis para comparar proporciones de dos variables
# categÃ³ricas (defina previamente los Ã©xitos y fracasos en cada caso)
# a) Genre: Se afirma que menos del 80% de los gÃ©neros es sport
#H0: proporciÃ³n < 0.8
#Ha: proporciÃ³n >= 0.8
prop.test( length(subset(dataset, dataset$Genre == 'Sports')),
length(dataset$Genre),
0.8,
alternative = "less") #p-value < 2.2e-16 < 0.05
#Por el valor de p(menor a 0.05), se rechaza la H0
# b) Publisher: Se afirma que  Electronic Arts es el 70% de los publishers
#H0: proporciÃ³n = 0.7
#Ha: proporciÃ³n < 0.7
prop.test( length(subset(dataset, dataset$Publisher == "Electronic Arts")),
length(dataset$Publisher),
0.7,
alternative = "less") # p-value = 2.86e-15 < 0.05
#Por el valor de p (menor a 0.05), se rechaza la H0
# 6. Realice una regresiÃ³n lineal simple entre dos variables numÃ©ricas
pairs(dataset)
cor(dataset$EU_Sales, dataset$NA_Sales) #0.4646233
#Modelo de regresiÇ¿n lineal simple
linearModel = lm(formula = EU_Sales ~  NA_Sales,
data = dataset)
summary(linearModel)
#Se ha filtrado para tomar en cuenta solo las de la plataforma XOne del 2016
dataset = read.csv("vgsales.csv")
summary(dataset)
class(dataset$Platform)
#dataset$Platform <- as.character(dataset$Platform)
dataset <- dataset[(dataset[, "Platform"]=="XOne") & (dataset[, "Year"]==2016) , ]
summary(dataset)
nrow(dataset) #54 registros
## 2. Realizar el anÃ¡lisis descriptivo (medidas y grÃ¡ficos) para dos variables numÃ©ricas
# a) AnÃ¡lisis descriptivo para la variable EU_Sales
mean(dataset$EU_Sales, na.rm = TRUE)
median(dataset$EU_Sales, na.rm = TRUE)
install.packages("modeest")
library(modeest)
mfv(dataset$EU_Sales) #la moda es 0.01
summary(dataset$EU_Sales)
#Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
#0.00000 0.01000 0.02000 0.08574 0.07750 1.26000
##GrÃ¡ficos
hist(dataset$EU_Sales)
plot(dataset$EU_Sales)
# b) AnÃ¡lisis descriptivo de la variable NA_sales
dataset$NA_Sales <- as.numeric(dataset$NA_Sales)
dataset
mean(dataset$NA_Sales, na.rm = TRUE)
median(dataset$NA_Sales, na.rm = TRUE)
mfv(dataset$NA_Sales) #la moda es 0.01
summary(dataset$NA_Sales)
#Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
#0.0000  0.0100  0.0300  0.1239  0.1450  1.2000
##GrÃ¡ficos
hist(dataset$NA_Sales)
plot(dataset$NA_Sales)
# 3. Realizar el anÃ¡lisis descriptivo (medidas y grÃ¡ficos) para dos variables categÃ³ricas
# a) AnÃ¡lisis descriptivo de la variable categÃ³rica Genre
##Tabla de frecuencia absoluta
table(dataset$Genre)
##Tabla de frecuencia relativa
table(dataset$Genre)/margin.table(table(dataset$Genre))
summary(dataset$Genre)
plot(dataset$Genre)
# b) AnÃ¡lisis descriptivo de la variable categÃ³rica Publisher
##Tabla de frecuencia absoluta
table(dataset$Publisher)
##Tabla de frecuencia relativa
table(dataset$Publisher)/margin.table(table(dataset$Publisher))
summary(dataset$Publisher)
plot(dataset$Publisher)
# 4. Realice el intervalo de confianza para las dos variables numÃ©ricas
## a) para la variable EU_Sales
t.test(x=dataset$EU_Sales, conf.level = 0.95)$conf.int #0.03289506 0.13858642
## b) para la variable NA_Sales
t.test(x=dataset$NA_Sales, conf.level = 0.95)$conf.int #0.06463596 0.18314182
# 5. Realice un contraste de hipÃ³tesis para comparar proporciones de dos variables
# categÃ³ricas (defina previamente los Ã©xitos y fracasos en cada caso)
# a) Genre: Se afirma que menos del 80% de los gÃ©neros es sport
#H0: proporciÃ³n < 0.8
#Ha: proporciÃ³n >= 0.8
prop.test( length(subset(dataset, dataset$Genre == 'Sports')),
length(dataset$Genre),
0.8,
alternative = "less") #p-value < 2.2e-16 < 0.05
#Por el valor de p(menor a 0.05), se rechaza la H0
# b) Publisher: Se afirma que  Electronic Arts es el 70% de los publishers
#H0: proporciÃ³n = 0.7
#Ha: proporciÃ³n < 0.7
prop.test( length(subset(dataset, dataset$Publisher == "Electronic Arts")),
length(dataset$Publisher),
0.7,
alternative = "less") # p-value = 2.86e-15 < 0.05
#Por el valor de p (menor a 0.05), se rechaza la H0
# 6. Realice una regresiÃ³n lineal simple entre dos variables numÃ©ricas
pairs(dataset)
cor(dataset$EU_Sales, dataset$NA_Sales) #0.4646233
#Modelo de regresiÇ¿n lineal simple
linearModel = lm(formula = EU_Sales ~  NA_Sales,
data = dataset)
summary(linearModel)
install.packages("modeest")
install("modeest")
install.packages("modeest")
dataset = read.csv("vgsales.csv")
summary(dataset)
class(dataset$Platform)
dataset$Platform <- as.character(dataset$Platform)
dataset <- dataset[(dataset[, "Platform"]=="XOne") & (dataset[, "Year"]==2016) , ]
summary(dataset)
nrow(dataset) #54 registros
# a) AnÃ¡lisis descriptivo para la variable EU_Sales
mean(dataset$EU_Sales, na.rm = TRUE)
median(dataset$EU_Sales, na.rm = TRUE)
install.packages("modeest")
library(modeest)
mfv(dataset$EU_Sales) #la moda es 0.01
summary(dataset$EU_Sales)
hist(dataset$EU_Sales)
plot(dataset$EU_Sales)
#1. Dataset escogido: https://www.kaggle.com/lava18/google-play-store-apps
dataset = read.csv("googleplaystore.csv")
View(dataset)
View(dataset)
summary(dataset)
dataset = read.csv("googleplaystore.csv")
summary(dataset)
class(dataset$Platform)
# Como vem os el dataset nos presenta un total de 10841 observaciones pero nuestro
#trabajo se centra en una menor camtidad de observaciones (30 a 50)
#por lo que vamos a proceder a hacer un muestreo aleatorio
data<-sample(dataset, size = 50, replace = FALSE)
# Como vem os el dataset nos presenta un total de 10841 observaciones pero nuestro
#trabajo se centra en una menor camtidad de observaciones (30 a 50)
#por lo que vamos a proceder a hacer un muestreo aleatorio
data<-sample(dataset, size = 2, replace = FALSE)
#por lo que vamos a proceder a hacer un muestreo aleatorio
data<-sample(dataset, size = 2, replace = TRUE)
View(data)
View(data)
help("sample")
data<-sample(dataset, size = c(50,13), replace = TRUE)
View(data)
data<-sample(dataset, size = c(13), replace = TRUE)
data<-sample(dataset, size = c(13), replace = TRUE)
or lo que vamos a proceder a hacer un muestreo aleatorio
data<-sample(dataset, size = c(13,50), replace = TRUE)
#por lo que vamos a proceder a hacer un muestreo aleatorio
data<-sample.int(dataset, size = 50, replace = TRUE)
#por lo que vamos a proceder a hacer un muestreo aleatorio
data<-sample.int(dataset, size = 50, replace = TRUE)
data<-sample.int(dataset, size = 50, replace = TRUE)
data<-sample.int(dataset, size = 50, replace = TRUE)
#por lo que vamos a proceder a hacer un muestreo aleatorio
data<-dataset[sample(1:nrow(dataset), 50)]
#por lo que vamos a proceder a hacer un muestreo aleatorio
data<-sample(dataset,1:nrow(dataset), 50)
data <- dataset.frame()
install.packages("dplyr")
library("dplyr")
data<-sample_n(dataset,50,replace = FALSE)
View(data)
View(data)
View(data)
View(data)
View(data)
View(data)
library("dplyr")
data<-sample_n(dataset,50,replace = FALSE)
View(data)
View(data)
View(data)
View(data)
data$Rating = ifelse(is.na(data$Rating),
ave(data$Rating, FUN = function(x) mean(x, na.rm = TRUE)),
data$Rating)
View(data)
View(data)
rating <- data$Rating
mean(rating)
median(rating)
mode(rating)
rating <- data$Rating
mean(rating)
median(rating)
#moda numérica
install.packages("modeest")
library(modeest)
mfv(rating) #la moda es 0.01
install.packages("modeest")
rating <- data$Rating
mean(rating)
median(rating)
#moda numérica
#install.packages("modeest")
library(modeest)
mfv(rating) #la moda es 0.01
summary(rating)
hist(rating,title('Histograma Rating Apps'))
plot(rating)
hist(rating)
hist(rating)
plot(rating,title('Rating'))
hist(rating)
plot(rating)
# • Primera variable número de Reviews
reviews <- data$Reviews
mean(reviews)
median(reviews)
#moda numérica
# de ser necesario instalar modeest
#install.packages("modeest")
mfv(reviews) #la moda es 0.01
summary(reviews)
hist(reviews)
plot(reviews)
Primera variable número de Reviews
reviews <- as.numeric(data$Reviews)
mean(reviews)
median(reviews)
#moda numérica
# de ser necesario instalar modeest
#install.packages("modeest")
mfv(reviews) #la moda es 0.01
summary(reviews)
hist(reviews)
plot(reviews)
hist(rating)
scatter.smooth(rating)
# • Análisis de la variable Category de la app
category <- data$Category
table(category)
##Tabla de frecuencia relativa
table(category)/margin.table(table(category))
summary(category)
hist(category)
plot(category)
plot(dataset$Genre)
hist(table(category))
genres <- data$Genres
table(genres)
##Tabla de frecuencia relativa
table(genres)/margin.table(table(genres))
summary(genres)
hist(table(genres))
t.test(x=rating, conf.level = 0.95)$conf.int
t.test(x=reviews, conf.level = 0.95)$conf.int
prop.test( length(subset(data, data$Category == 'FAMILY')),
length(data$Category),
0.2,
alternative = "less")
prop.test( length(subset(data, data$Genres == "Education")),
length(data$Genres),
0.2,
alternative = "less")
prop.test( length(subset(data, data$Category == 'FAMILY')),
length(data$Category),
0.2,
alternative = "less") #p-value =0.26 > 0.05
prop.test( length(subset(data, data$Genres == "Education")),
length(data$Genres),
0.2,
alternative = "less")
prop.test( length(subset(data, data$Category == 'FAMILY')),
length(data$Category),
0.2,
alternative = "less")
prop.test( length(subset(dataset, dataset$Genre == 'Sports')),
length(dataset$Genre),
0.8,
alternative = "less") #p-value < 2.2e-16 < 0.05
#Por el valor de p(menor a 0.05), se rechaza la H0
prop.test( length(subset(dataset, dataset$Publisher == "Electronic Arts")),
length(dataset$Publisher),
0.7,
alternative = "less")
prop.test( length(subset(dataset, dataset$Publisher == "Electronic Arts")),
length(dataset$Publisher),
0.7,
alternative = "less") # p-value = 2.86e-15 < 0.05
#Por el valor de p (menor a 0.05), se rechaza la H0
prop.test( length(subset(data, data$Category == 'FAMILY')),
length(data$Category),
0.2,
alternative = "less")
prop.test( length(subset(data, data$Genres == "Education")),
length(data$Genres),
0.02,
alternative = "less") # p-value = 2.86e-15 < 0.05
#Por el valor de p (menor a 0.05)
prop.test( length(subset(data, data$Genres == "Education")),
length(data$Genres),
0.02,
alternative = "less")
prop.test( length(subset(data, data$Genres == "Education")),
length(data$Genres),
0.8,
alternative = "less")
prop.test( length(subset(data, data$Genres == "Education")),
length(data$Genres),
0.01,
alternative = "less")
prop.test( length(subset(data, data$Genres == "Education")),
length(data$Genres),
0.5,
alternative = "less")
prop.test( length(subset(data, data$Genres == "Education")),
length(data$Genres),
0.1,
alternative = "less")
prop.test( length(subset(data, data$Genres == "Education")),
length(data$Genres),
0.1,
alternative = "less")
prop.test( length(subset(data, data$Genres == "Education")),
length(data$Genres),
0.1,
alternative = "less")
prop.test( length(subset(data, data$Genres == "Education")),
length(data$Genres),
0.1,
alternative = "less")
prop.test( length(subset(data, data$Genres == "Education")),
length(data$Genres),
0.1,
alternative = "less")
prop.test( length(subset(data, data$Genres == "Education")),
length(data$Genres),
0.1,
alternative = "less")
prop.test( length(subset(data, data$Genres == "Education")),
length(data$Genres),
0.1,
alternative = "less")
prop.test( length(subset(data, data$Genres == "Education")),
length(data$Genres),
0.1,
alternative = "less")
prop.test( length(subset(data, data$Genres == "Education")),
length(data$Genres),
0.1,
alternative = "less")
prop.test( length(subset(data, data$Genres == "Education")),
length(data$Genres),
0.1,
alternative = "less")
prop.test( length(subset(data, data$Genres == "Education")),
length(data$Genres),
0.1,
alternative = "less")
prop.test( length(subset(data, data$Genres == "Education")),
length(data$Genres),
0.1,
alternative = "less")
prop.test( length(subset(data, data$Genres == "Education")),
length(data$Genres),
0.1,
alternative = "less")
prop.test( length(subset(data, data$Category == 'FAMILY')),
length(data$Category),
0.2,
alternative = "less")
prop.test( length(subset(data, data$Genres == 'Education')),
length(data$Genres),
0.1,
alternative = "less")
prop.test( length(subset(data, data$Genres == 'Education')),
length(data$Genres),
0.1,
alternative = "less")
prop.test( length(subset(data, data$Genres == 'Education')),
length(data$Genres),
0.1,
alternative = "less")
prop.test( length(subset(data, data$Genres == 'Education')),
length(data$Genres),
0.1,
alternative = "less")
prop.test( length(subset(data, data$Genres == 'Education')),
length(data$Genres),
0.1,
alternative = "less")
prop.test( length(subset(data, data$Genres == 'Education')),
length(data$Genres),
0.1,
alternative = "less")
prop.test( length(subset(data, data$Genres == 'Education')),
length(data$Genres),
0.1,
alternative = "less")
prop.test( length(subset(data, data$Genres == 'Education')),
length(data$Genres),
0.1,
alternative = "less")
prop.test( length(subset(data, data$Genres == 'Entertainment')),
length(data$Genres),
0.1,
alternative = "less")
prop.test( length(subset(data, data$Genres == 'Entertainment')),
length(data$Genres),
0.1,
alternative = "less")
prop.test( length(subset(data, data$Genres == 'Entertainment')),
length(data$Genres),
0.1,
alternative = "less")
prop.test( length(subset(data, data$Genres == 'Entertainment')),
length(data$Genres),
0.9,
alternative = "less")
prop.test( length(subset(data, data$Genres == 'Entertainment')),
length(data$Genres),
0.8,
alternative = "less")
prop.test( length(subset(data, data$Genres == 'Enducation')),
length(data$Genres),
0.1,
alternative = "less") # p-value > 0.05
#Por el valor de p (menor a 0.05), se rechaza la H0
pairs(data)
cor(data$Rating, data$Reviews)
pairs(data)
cor(rating, reviews)
#Modelo de regresion lineal simple
linearModel = lm(formula = Rating ~  Reviews,
data = data)
summary(linearModel)
